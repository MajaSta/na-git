ft_split.c:60:8: error: implicitly declaring library function 'strlen' with type 'unsigned long (const char *)' [-Werror,-Wimplicit-function-declaration]
        len = strlen(s);
              ^
ft_split.c:60:8: note: include the header <string.h> or explicitly provide a declaration for 'strlen'
ft_split.c:65:26: error: comparison of integers of different signs: 'size_t' (aka 'unsigned long') and 'int' [-Werror,-Wsign-compare]
                if (s[i] != c && start == -1)
                                 ~~~~~ ^  ~~
ft_split.c:67:44: error: comparison of integers of different signs: 'size_t' (aka 'unsigned long') and 'int' [-Werror,-Wsign-compare]
        else if ((s[i] == c || i == len) && start != -1)


                                            ~~~~~ ^  ~~
#include "libft.h"

static size_t	word_count(const char *s, char c)
{
	size_t	count;
	int		in_word;

	count = 0;
	in_word = 0;
	while (*s)
	{
		if (*s != c && !in_word)
		{
			in_word = 1;
			count++;
		}
		else if (*s == c)
			in_word = 0;
		s++;
	}
	return (count);
}

static char	*word_dup(const char *s, size_t start, size_t end)
{
	char	*word;

	word = (char *)malloc((end - start + 1) * sizeof(char));
	if (!word)
		return (NULL);
	ft_memcpy(word, s + start, end - start);
	word[end - start] = '\0';
	return (word);
}

char	**ft_split(char const *s, char c)
{
	size_t	i;
	size_t	j;
	size_t	start;
	char	**split;
	size_t	len;

	i = 0;
	j = 0;
	if (!s)
		return (NULL);
	len = ft_strlen(s);
	split = (char **)malloc((word_count(s, c) + 1) * sizeof(char *));
	if (!split)
		return (NULL);
	while (i <= len)
		if (s[i] != c && start == -1)
			start = i;
	else if ((s[i] == c || i == len) && start != -1)
		split[j++] = word_dup(s, start, i);
	start = -1;
	i++;
	split[j] = NULL;
	return (split);
}



#include <string.h>
#include <stdlib.h> // For malloc
#include "libft.h"

static size_t word_count(const char *s, char c)
{
    size_t count = 0;
    int in_word = 0;

    while (*s)
    {
        if (*s != c && !in_word)
        {
            in_word = 1;
            count++;
        }
        else if (*s == c)
            in_word = 0;
        s++;
    }
    return count;
}

static char *word_dup(const char *s, size_t start, size_t end)
{
    char *word = (char *)malloc((end - start + 1) * sizeof(char));
    if (!word)
        return NULL;
    memcpy(word, s + start, end - start);
    word[end - start] = '\0';
    return word;
}

char **ft_split(char const *s, char c)
{
    size_t i = 0, j = 0, start = (size_t)-1;
    char **split;
    size_t len;

    if (!s)
        return NULL;

    len = strlen(s);
    split = (char **)malloc((word_count(s, c) + 1) * sizeof(char *));
    if (!split)
        return NULL;

    while (i < len)
    {
        if (s[i] != c && start == (size_t)-1)
            start = i;
        else if ((s[i] == c || i == len) && start != (size_t)-1)
        {
            split[j++] = word_dup(s, start, i);
            start = (size_t)-1;
        }
        i++;
    }
    split[j] = NULL;
    return split;
}
